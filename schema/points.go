// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Point is an object representing the database table.
type Point struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	StrokeID int64  `boil:"stroke_id" json:"stroke_id" toml:"stroke_id" yaml:"stroke_id"`
	X        string `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y        string `boil:"y" json:"y" toml:"y" yaml:"y"`

	R *pointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PointColumns = struct {
	ID       string
	StrokeID string
	X        string
	Y        string
}{
	ID:       "id",
	StrokeID: "stroke_id",
	X:        "x",
	Y:        "y",
}

// pointR is where relationships are stored.
type pointR struct {
}

// pointL is where Load methods for each relationship are stored.
type pointL struct{}

var (
	pointColumns               = []string{"id", "stroke_id", "x", "y"}
	pointColumnsWithoutDefault = []string{"stroke_id", "x", "y"}
	pointColumnsWithDefault    = []string{"id"}
	pointPrimaryKeyColumns     = []string{"id"}
)

type (
	// PointSlice is an alias for a slice of pointers to Point.
	// This should generally be used opposed to []Point.
	PointSlice []*Point
	// PointHook is the signature for custom Point hook methods
	PointHook func(boil.Executor, *Point) error

	pointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pointType                 = reflect.TypeOf(&Point{})
	pointMapping              = queries.MakeStructMapping(pointType)
	pointPrimaryKeyMapping, _ = queries.BindMapping(pointType, pointMapping, pointPrimaryKeyColumns)
	pointInsertCacheMut       sync.RWMutex
	pointInsertCache          = make(map[string]insertCache)
	pointUpdateCacheMut       sync.RWMutex
	pointUpdateCache          = make(map[string]updateCache)
	pointUpsertCacheMut       sync.RWMutex
	pointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var pointBeforeInsertHooks []PointHook
var pointBeforeUpdateHooks []PointHook
var pointBeforeDeleteHooks []PointHook
var pointBeforeUpsertHooks []PointHook

var pointAfterInsertHooks []PointHook
var pointAfterSelectHooks []PointHook
var pointAfterUpdateHooks []PointHook
var pointAfterDeleteHooks []PointHook
var pointAfterUpsertHooks []PointHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Point) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pointBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Point) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pointBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Point) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pointBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Point) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pointBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Point) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pointAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Point) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pointAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Point) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pointAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Point) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pointAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Point) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pointAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPointHook registers your hook function for all future operations.
func AddPointHook(hookPoint boil.HookPoint, pointHook PointHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pointBeforeInsertHooks = append(pointBeforeInsertHooks, pointHook)
	case boil.BeforeUpdateHook:
		pointBeforeUpdateHooks = append(pointBeforeUpdateHooks, pointHook)
	case boil.BeforeDeleteHook:
		pointBeforeDeleteHooks = append(pointBeforeDeleteHooks, pointHook)
	case boil.BeforeUpsertHook:
		pointBeforeUpsertHooks = append(pointBeforeUpsertHooks, pointHook)
	case boil.AfterInsertHook:
		pointAfterInsertHooks = append(pointAfterInsertHooks, pointHook)
	case boil.AfterSelectHook:
		pointAfterSelectHooks = append(pointAfterSelectHooks, pointHook)
	case boil.AfterUpdateHook:
		pointAfterUpdateHooks = append(pointAfterUpdateHooks, pointHook)
	case boil.AfterDeleteHook:
		pointAfterDeleteHooks = append(pointAfterDeleteHooks, pointHook)
	case boil.AfterUpsertHook:
		pointAfterUpsertHooks = append(pointAfterUpsertHooks, pointHook)
	}
}

// OneP returns a single point record from the query, and panics on error.
func (q pointQuery) OneP() *Point {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single point record from the query.
func (q pointQuery) One() (*Point, error) {
	o := &Point{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for points")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Point records from the query, and panics on error.
func (q pointQuery) AllP() PointSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Point records from the query.
func (q pointQuery) All() (PointSlice, error) {
	var o []*Point

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Point slice")
	}

	if len(pointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Point records in the query, and panics on error.
func (q pointQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Point records in the query.
func (q pointQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count points rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q pointQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q pointQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if points exists")
	}

	return count > 0, nil
}

// PointsG retrieves all records.
func PointsG(mods ...qm.QueryMod) pointQuery {
	return Points(boil.GetDB(), mods...)
}

// Points retrieves all the records using an executor.
func Points(exec boil.Executor, mods ...qm.QueryMod) pointQuery {
	mods = append(mods, qm.From("`points`"))
	return pointQuery{NewQuery(exec, mods...)}
}

// FindPointG retrieves a single record by ID.
func FindPointG(id int64, selectCols ...string) (*Point, error) {
	return FindPoint(boil.GetDB(), id, selectCols...)
}

// FindPointGP retrieves a single record by ID, and panics on error.
func FindPointGP(id int64, selectCols ...string) *Point {
	retobj, err := FindPoint(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPoint(exec boil.Executor, id int64, selectCols ...string) (*Point, error) {
	pointObj := &Point{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `points` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(pointObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from points")
	}

	return pointObj, nil
}

// FindPointP retrieves a single record by ID with an executor, and panics on error.
func FindPointP(exec boil.Executor, id int64, selectCols ...string) *Point {
	retobj, err := FindPoint(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Point) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Point) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Point) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Point) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no points provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pointColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	pointInsertCacheMut.RLock()
	cache, cached := pointInsertCache[key]
	pointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			pointColumns,
			pointColumnsWithDefault,
			pointColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(pointType, pointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pointType, pointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `points` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `points` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `points` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, pointPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into points")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pointMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for points")
	}

CacheNoHooks:
	if !cached {
		pointInsertCacheMut.Lock()
		pointInsertCache[key] = cache
		pointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Point record. See Update for
// whitelist behavior description.
func (o *Point) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Point record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Point) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Point, and panics on error.
// See Update for whitelist behavior description.
func (o *Point) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Point.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Point) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	pointUpdateCacheMut.RLock()
	cache, cached := pointUpdateCache[key]
	pointUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			pointColumns,
			pointPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("model: unable to update points, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `points` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, pointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pointType, pointMapping, append(wl, pointPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update points row")
	}

	if !cached {
		pointUpdateCacheMut.Lock()
		pointUpdateCache[key] = cache
		pointUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q pointQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q pointQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for points")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PointSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PointSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PointSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PointSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `points` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in point slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Point) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Point) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Point) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Point) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no points provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pointColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pointUpsertCacheMut.RLock()
	cache, cached := pointUpsertCache[key]
	pointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			pointColumns,
			pointColumnsWithDefault,
			pointColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			pointColumns,
			pointPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert points, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "points", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `points` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(pointType, pointMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pointType, pointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for points")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pointMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for points")
	}

CacheNoHooks:
	if !cached {
		pointUpsertCacheMut.Lock()
		pointUpsertCache[key] = cache
		pointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Point record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Point) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Point record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Point) DeleteG() error {
	if o == nil {
		return errors.New("model: no Point provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Point record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Point) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Point record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Point) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Point provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pointPrimaryKeyMapping)
	sql := "DELETE FROM `points` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from points")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q pointQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q pointQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no pointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from points")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PointSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PointSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Point slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PointSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PointSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Point slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(pointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `points` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from point slice")
	}

	if len(pointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Point) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Point) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Point) ReloadG() error {
	if o == nil {
		return errors.New("model: no Point provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Point) Reload(exec boil.Executor) error {
	ret, err := FindPoint(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PointSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PointSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PointSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty PointSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PointSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	points := PointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `points`.* FROM `points` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&points)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PointSlice")
	}

	*o = points

	return nil
}

// PointExists checks if the Point row exists.
func PointExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `points` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if points exists")
	}

	return exists, nil
}

// PointExistsG checks if the Point row exists.
func PointExistsG(id int64) (bool, error) {
	return PointExists(boil.GetDB(), id)
}

// PointExistsGP checks if the Point row exists. Panics on error.
func PointExistsGP(id int64) bool {
	e, err := PointExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PointExistsP checks if the Point row exists. Panics on error.
func PointExistsP(exec boil.Executor, id int64) bool {
	e, err := PointExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
