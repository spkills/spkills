// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Stroke is an object representing the database table.
type Stroke struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoomID    int64     `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`
	Width     uint8     `boil:"width" json:"width" toml:"width" yaml:"width"`
	Red       uint8     `boil:"red" json:"red" toml:"red" yaml:"red"`
	Green     uint8     `boil:"green" json:"green" toml:"green" yaml:"green"`
	Blue      uint8     `boil:"blue" json:"blue" toml:"blue" yaml:"blue"`
	Alpha     string    `boil:"alpha" json:"alpha" toml:"alpha" yaml:"alpha"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *strokeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L strokeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StrokeColumns = struct {
	ID        string
	RoomID    string
	Width     string
	Red       string
	Green     string
	Blue      string
	Alpha     string
	CreatedAt string
}{
	ID:        "id",
	RoomID:    "room_id",
	Width:     "width",
	Red:       "red",
	Green:     "green",
	Blue:      "blue",
	Alpha:     "alpha",
	CreatedAt: "created_at",
}

// strokeR is where relationships are stored.
type strokeR struct {
}

// strokeL is where Load methods for each relationship are stored.
type strokeL struct{}

var (
	strokeColumns               = []string{"id", "room_id", "width", "red", "green", "blue", "alpha", "created_at"}
	strokeColumnsWithoutDefault = []string{"room_id", "width", "red", "green", "blue", "alpha"}
	strokeColumnsWithDefault    = []string{"id", "created_at"}
	strokePrimaryKeyColumns     = []string{"id"}
)

type (
	// StrokeSlice is an alias for a slice of pointers to Stroke.
	// This should generally be used opposed to []Stroke.
	StrokeSlice []*Stroke
	// StrokeHook is the signature for custom Stroke hook methods
	StrokeHook func(boil.Executor, *Stroke) error

	strokeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	strokeType                 = reflect.TypeOf(&Stroke{})
	strokeMapping              = queries.MakeStructMapping(strokeType)
	strokePrimaryKeyMapping, _ = queries.BindMapping(strokeType, strokeMapping, strokePrimaryKeyColumns)
	strokeInsertCacheMut       sync.RWMutex
	strokeInsertCache          = make(map[string]insertCache)
	strokeUpdateCacheMut       sync.RWMutex
	strokeUpdateCache          = make(map[string]updateCache)
	strokeUpsertCacheMut       sync.RWMutex
	strokeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var strokeBeforeInsertHooks []StrokeHook
var strokeBeforeUpdateHooks []StrokeHook
var strokeBeforeDeleteHooks []StrokeHook
var strokeBeforeUpsertHooks []StrokeHook

var strokeAfterInsertHooks []StrokeHook
var strokeAfterSelectHooks []StrokeHook
var strokeAfterUpdateHooks []StrokeHook
var strokeAfterDeleteHooks []StrokeHook
var strokeAfterUpsertHooks []StrokeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Stroke) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Stroke) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Stroke) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Stroke) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Stroke) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Stroke) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Stroke) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Stroke) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Stroke) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range strokeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStrokeHook registers your hook function for all future operations.
func AddStrokeHook(hookPoint boil.HookPoint, strokeHook StrokeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		strokeBeforeInsertHooks = append(strokeBeforeInsertHooks, strokeHook)
	case boil.BeforeUpdateHook:
		strokeBeforeUpdateHooks = append(strokeBeforeUpdateHooks, strokeHook)
	case boil.BeforeDeleteHook:
		strokeBeforeDeleteHooks = append(strokeBeforeDeleteHooks, strokeHook)
	case boil.BeforeUpsertHook:
		strokeBeforeUpsertHooks = append(strokeBeforeUpsertHooks, strokeHook)
	case boil.AfterInsertHook:
		strokeAfterInsertHooks = append(strokeAfterInsertHooks, strokeHook)
	case boil.AfterSelectHook:
		strokeAfterSelectHooks = append(strokeAfterSelectHooks, strokeHook)
	case boil.AfterUpdateHook:
		strokeAfterUpdateHooks = append(strokeAfterUpdateHooks, strokeHook)
	case boil.AfterDeleteHook:
		strokeAfterDeleteHooks = append(strokeAfterDeleteHooks, strokeHook)
	case boil.AfterUpsertHook:
		strokeAfterUpsertHooks = append(strokeAfterUpsertHooks, strokeHook)
	}
}

// OneP returns a single stroke record from the query, and panics on error.
func (q strokeQuery) OneP() *Stroke {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single stroke record from the query.
func (q strokeQuery) One() (*Stroke, error) {
	o := &Stroke{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for strokes")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Stroke records from the query, and panics on error.
func (q strokeQuery) AllP() StrokeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Stroke records from the query.
func (q strokeQuery) All() (StrokeSlice, error) {
	var o []*Stroke

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Stroke slice")
	}

	if len(strokeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Stroke records in the query, and panics on error.
func (q strokeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Stroke records in the query.
func (q strokeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count strokes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q strokeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q strokeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if strokes exists")
	}

	return count > 0, nil
}

// StrokesG retrieves all records.
func StrokesG(mods ...qm.QueryMod) strokeQuery {
	return Strokes(boil.GetDB(), mods...)
}

// Strokes retrieves all the records using an executor.
func Strokes(exec boil.Executor, mods ...qm.QueryMod) strokeQuery {
	mods = append(mods, qm.From("`strokes`"))
	return strokeQuery{NewQuery(exec, mods...)}
}

// FindStrokeG retrieves a single record by ID.
func FindStrokeG(id int64, selectCols ...string) (*Stroke, error) {
	return FindStroke(boil.GetDB(), id, selectCols...)
}

// FindStrokeGP retrieves a single record by ID, and panics on error.
func FindStrokeGP(id int64, selectCols ...string) *Stroke {
	retobj, err := FindStroke(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStroke retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStroke(exec boil.Executor, id int64, selectCols ...string) (*Stroke, error) {
	strokeObj := &Stroke{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `strokes` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(strokeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from strokes")
	}

	return strokeObj, nil
}

// FindStrokeP retrieves a single record by ID with an executor, and panics on error.
func FindStrokeP(exec boil.Executor, id int64, selectCols ...string) *Stroke {
	retobj, err := FindStroke(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Stroke) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Stroke) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Stroke) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Stroke) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no strokes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(strokeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	strokeInsertCacheMut.RLock()
	cache, cached := strokeInsertCache[key]
	strokeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			strokeColumns,
			strokeColumnsWithDefault,
			strokeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(strokeType, strokeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(strokeType, strokeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `strokes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `strokes` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `strokes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, strokePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into strokes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == strokeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for strokes")
	}

CacheNoHooks:
	if !cached {
		strokeInsertCacheMut.Lock()
		strokeInsertCache[key] = cache
		strokeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Stroke record. See Update for
// whitelist behavior description.
func (o *Stroke) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Stroke record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Stroke) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Stroke, and panics on error.
// See Update for whitelist behavior description.
func (o *Stroke) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Stroke.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Stroke) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	strokeUpdateCacheMut.RLock()
	cache, cached := strokeUpdateCache[key]
	strokeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			strokeColumns,
			strokePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("model: unable to update strokes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `strokes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, strokePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(strokeType, strokeMapping, append(wl, strokePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update strokes row")
	}

	if !cached {
		strokeUpdateCacheMut.Lock()
		strokeUpdateCache[key] = cache
		strokeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q strokeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q strokeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for strokes")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StrokeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o StrokeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o StrokeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StrokeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), strokePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `strokes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, strokePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in stroke slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Stroke) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Stroke) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Stroke) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Stroke) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no strokes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(strokeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	strokeUpsertCacheMut.RLock()
	cache, cached := strokeUpsertCache[key]
	strokeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			strokeColumns,
			strokeColumnsWithDefault,
			strokeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			strokeColumns,
			strokePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert strokes, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "strokes", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `strokes` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(strokeType, strokeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(strokeType, strokeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for strokes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == strokeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for strokes")
	}

CacheNoHooks:
	if !cached {
		strokeUpsertCacheMut.Lock()
		strokeUpsertCache[key] = cache
		strokeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Stroke record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Stroke) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Stroke record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Stroke) DeleteG() error {
	if o == nil {
		return errors.New("model: no Stroke provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Stroke record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Stroke) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Stroke record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Stroke) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Stroke provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), strokePrimaryKeyMapping)
	sql := "DELETE FROM `strokes` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from strokes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q strokeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q strokeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no strokeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from strokes")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o StrokeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o StrokeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Stroke slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o StrokeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StrokeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Stroke slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(strokeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), strokePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `strokes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, strokePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from stroke slice")
	}

	if len(strokeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Stroke) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Stroke) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Stroke) ReloadG() error {
	if o == nil {
		return errors.New("model: no Stroke provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Stroke) Reload(exec boil.Executor) error {
	ret, err := FindStroke(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StrokeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StrokeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StrokeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty StrokeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StrokeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	strokes := StrokeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), strokePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `strokes`.* FROM `strokes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, strokePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&strokes)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in StrokeSlice")
	}

	*o = strokes

	return nil
}

// StrokeExists checks if the Stroke row exists.
func StrokeExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `strokes` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if strokes exists")
	}

	return exists, nil
}

// StrokeExistsG checks if the Stroke row exists.
func StrokeExistsG(id int64) (bool, error) {
	return StrokeExists(boil.GetDB(), id)
}

// StrokeExistsGP checks if the Stroke row exists. Panics on error.
func StrokeExistsGP(id int64) bool {
	e, err := StrokeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StrokeExistsP checks if the Stroke row exists. Panics on error.
func StrokeExistsP(exec boil.Executor, id int64) bool {
	e, err := StrokeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
